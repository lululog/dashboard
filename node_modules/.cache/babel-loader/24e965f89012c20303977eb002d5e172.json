{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/R3G4/Delivery/B-DEV-500-PAR-5-1-cardgames-lucas.guyader/src/components/GoogleBtn2.js\";\n\n/* global gapi */\nimport ReactDOM from \"react-dom\";\nimport React, { Component } from \"react\";\nimport { GoogleLogin, GoogleLogout } from 'react-google-login';\nconst CLIENT_ID = '1065341075883-ai3bp8cagjv0e96ig0phkkng2fovorru.apps.googleusercontent.com';\nvar GoogleAuth;\nvar SCOPE = \"https://www.googleapis.com/auth/drive.metadata.readonly\";\n\nfunction loadApi() {\n  const script = document.createElement(\"script\");\n  script.src = \"https://apis.google.com/js/client.js\";\n  document.body.appendChild(script);\n\n  script.onload = () => {\n    window.gapi.load(\"client:auth2\", initClient);\n  };\n}\n\nfunction handleClientLoad() {\n  // Load the API's client and auth2 modules.\n  // Call the initClient function after the modules load.\n  gapi.load(\"client:auth2\", initClient);\n}\n\nfunction initClient() {\n  // In practice, your app can retrieve one or more discovery documents.\n  var discoveryUrl = \"https://www.googleapis.com/discovery/v1/apis/drive/v3/rest\"; // Initialize the gapi.client object, which app uses to make API requests.\n  // Get API key and client ID from API Console.\n  // 'scope' field specifies space-delimited list of access scopes.\n\n  gapi.client.init({\n    apiKey: \"AIzaSyCcr8bHw2MiKRDvGtGgs-qxSVpES84mX9k\",\n    clientId: \"1065341075883-ai3bp8cagjv0e96ig0phkkng2fovorru.apps.googleusercontent.com\",\n    discoveryDocs: [discoveryUrl],\n    scope: SCOPE\n  }).then(function () {\n    GoogleAuth = gapi.auth2.getAuthInstance(); // Listen for sign-in state changes.\n\n    gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus); // Handle initial sign-in state. (Determine if user is already signed in.)\n\n    var user = gapi.auth2.getAuthInstance().currentUser.get();\n    setSigninStatus(); // Call handleAuthClick function when user clicks on\n    //      \"Sign In/Authorize\" button.\n  });\n}\n\nfunction handleAuthClick() {\n  if (gapi.auth2.getAuthInstance().isSignedIn.get()) {\n    // User is authorized and has clicked \"Sign out\" button.\n    gapi.auth2.getAuthInstance().signOut();\n  } else {\n    // User is not signed in. Start Google auth flow.\n    gapi.auth2.getAuthInstance().signIn();\n  }\n}\n\nfunction revokeAccess() {\n  gapi.auth2.getAuthInstance().disconnect();\n}\n\nfunction setSigninStatus() {\n  var user = gapi.auth2.getAuthInstance().currentUser.get();\n  var isAuthorized = user.hasGrantedScopes(SCOPE);\n  /*if (isAuthorized) {\n    GoogleBtn2.setState({\n      signInOut_text: \"Sign out\",\n      revoke_text: \"Revoke access\"\n    });*/\n\n  /*$(\"#revoke-access-button\").css(\"display\", \"inline-block\");\n  $(\"#auth-status\").html(\n    \"You are currently signed in and have granted \" + \"access to this app.\"\n  );*/\n\n  /*} else {\n    GoogleBtn2.setState({\n      signInOut_text: \"Sign In/Authorize\",\n      revoke_text: \"Revoke access\"\n    });*/\n\n  /*$(\"#revoke-access-button\").css(\"display\", \"none\");\n  $(\"#auth-status\").html(\n    \"You have not authorized this app or you are \" + \"signed out.\"\n  );*/\n  //}\n}\n\nfunction updateSigninStatus() {\n  setSigninStatus();\n}\n\nclass GoogleBtn2 extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      signInOut_text: \"Sign In/Authorize\",\n      revoke_text: \"Revoke access\"\n    };\n  }\n\n  componentDidMount() {\n    loadApi();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(GoogleLogin, {\n        clientId: CLIENT_ID,\n        buttonText: \"Login with google\",\n        onSuccess: this.login,\n        onFailure: this.handleLoginFailure,\n        cookiePolicy: 'single_host_origin',\n        responseType: \"code,token\",\n        onClick: () => handleAuthClick(),\n        id: \"sign-in-or-out-button\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default GoogleBtn2;","map":{"version":3,"sources":["/home/R3G4/Delivery/B-DEV-500-PAR-5-1-cardgames-lucas.guyader/src/components/GoogleBtn2.js"],"names":["ReactDOM","React","Component","GoogleLogin","GoogleLogout","CLIENT_ID","GoogleAuth","SCOPE","loadApi","script","document","createElement","src","body","appendChild","onload","window","gapi","load","initClient","handleClientLoad","discoveryUrl","client","init","apiKey","clientId","discoveryDocs","scope","then","auth2","getAuthInstance","isSignedIn","listen","updateSigninStatus","user","currentUser","get","setSigninStatus","handleAuthClick","signOut","signIn","revokeAccess","disconnect","isAuthorized","hasGrantedScopes","GoogleBtn2","state","signInOut_text","revoke_text","componentDidMount","render","login","handleLoginFailure"],"mappings":";;;AAAA;AACA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,YAAtB,QAA0C,oBAA1C;AAEA,MAAMC,SAAS,GAAG,2EAAlB;AAEA,IAAIC,UAAJ;AACA,IAAIC,KAAK,GAAG,yDAAZ;;AAEA,SAASC,OAAT,GAAmB;AACjB,QAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;AACAF,EAAAA,MAAM,CAACG,GAAP,GAAa,sCAAb;AACAF,EAAAA,QAAQ,CAACG,IAAT,CAAcC,WAAd,CAA0BL,MAA1B;;AAEAA,EAAAA,MAAM,CAACM,MAAP,GAAgB,MAAM;AACpBC,IAAAA,MAAM,CAACC,IAAP,CAAYC,IAAZ,CAAiB,cAAjB,EAAiCC,UAAjC;AACD,GAFD;AAGD;;AAED,SAASC,gBAAT,GAA4B;AAC1B;AACA;AACAH,EAAAA,IAAI,CAACC,IAAL,CAAU,cAAV,EAA0BC,UAA1B;AACD;;AAED,SAASA,UAAT,GAAsB;AACpB;AACA,MAAIE,YAAY,GACd,4DADF,CAFoB,CAKpB;AACA;AACA;;AACAJ,EAAAA,IAAI,CAACK,MAAL,CACGC,IADH,CACQ;AACJC,IAAAA,MAAM,EAAE,yCADJ;AAEJC,IAAAA,QAAQ,EACN,2EAHE;AAIJC,IAAAA,aAAa,EAAE,CAACL,YAAD,CAJX;AAKJM,IAAAA,KAAK,EAAEpB;AALH,GADR,EAQGqB,IARH,CAQQ,YAAY;AAChBtB,IAAAA,UAAU,GAAGW,IAAI,CAACY,KAAL,CAAWC,eAAX,EAAb,CADgB,CAGhB;;AACAb,IAAAA,IAAI,CAACY,KAAL,CAAWC,eAAX,GAA6BC,UAA7B,CAAwCC,MAAxC,CAA+CC,kBAA/C,EAJgB,CAMhB;;AACA,QAAIC,IAAI,GAAGjB,IAAI,CAACY,KAAL,CAAWC,eAAX,GAA6BK,WAA7B,CAAyCC,GAAzC,EAAX;AACAC,IAAAA,eAAe,GARC,CAUhB;AACA;AACD,GApBH;AAqBD;;AAED,SAASC,eAAT,GAA2B;AACzB,MAAIrB,IAAI,CAACY,KAAL,CAAWC,eAAX,GAA6BC,UAA7B,CAAwCK,GAAxC,EAAJ,EAAmD;AACjD;AACAnB,IAAAA,IAAI,CAACY,KAAL,CAAWC,eAAX,GAA6BS,OAA7B;AACD,GAHD,MAGO;AACL;AACAtB,IAAAA,IAAI,CAACY,KAAL,CAAWC,eAAX,GAA6BU,MAA7B;AACD;AACF;;AAED,SAASC,YAAT,GAAwB;AACtBxB,EAAAA,IAAI,CAACY,KAAL,CAAWC,eAAX,GAA6BY,UAA7B;AACD;;AAED,SAASL,eAAT,GAA2B;AACzB,MAAIH,IAAI,GAAGjB,IAAI,CAACY,KAAL,CAAWC,eAAX,GAA6BK,WAA7B,CAAyCC,GAAzC,EAAX;AACA,MAAIO,YAAY,GAAGT,IAAI,CAACU,gBAAL,CAAsBrC,KAAtB,CAAnB;AACA;AACF;AACA;AACA;AACA;;AACI;AACJ;AACA;AACA;;AACE;AACF;AACA;AACA;AACA;;AACI;AACJ;AACA;AACA;AACE;AACD;;AAED,SAAS0B,kBAAT,GAA8B;AAC5BI,EAAAA,eAAe;AAChB;;AAED,MAAMQ,UAAN,SAAyB3C,SAAzB,CAAmC;AAAA;AAAA;AAAA,SAIjC4C,KAJiC,GAIzB;AACNC,MAAAA,cAAc,EAAE,mBADV;AAENC,MAAAA,WAAW,EAAE;AAFP,KAJyB;AAAA;;AACjCC,EAAAA,iBAAiB,GAAG;AAClBzC,IAAAA,OAAO;AACR;;AAKD0C,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,6BACE,QAAC,WAAD;AACE,QAAA,QAAQ,EAAG7C,SADb;AAEE,QAAA,UAAU,EAAC,mBAFb;AAGE,QAAA,SAAS,EAAG,KAAK8C,KAHnB;AAIE,QAAA,SAAS,EAAG,KAAKC,kBAJnB;AAKE,QAAA,YAAY,EAAG,oBALjB;AAME,QAAA,YAAY,EAAC,YANf;AAOE,QAAA,OAAO,EAAE,MAAMd,eAAe,EAPhC;AAQE,QAAA,EAAE,EAAC;AARL;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAcD;;AAvBgC;;AA0BnC,eAAeO,UAAf","sourcesContent":["/* global gapi */\nimport ReactDOM from \"react-dom\";\nimport React, { Component } from \"react\";\nimport { GoogleLogin, GoogleLogout } from 'react-google-login';\n\nconst CLIENT_ID = '1065341075883-ai3bp8cagjv0e96ig0phkkng2fovorru.apps.googleusercontent.com';\n\nvar GoogleAuth;\nvar SCOPE = \"https://www.googleapis.com/auth/drive.metadata.readonly\";\n\nfunction loadApi() {\n  const script = document.createElement(\"script\");\n  script.src = \"https://apis.google.com/js/client.js\";\n  document.body.appendChild(script);\n\n  script.onload = () => {\n    window.gapi.load(\"client:auth2\", initClient);\n  };\n}\n\nfunction handleClientLoad() {\n  // Load the API's client and auth2 modules.\n  // Call the initClient function after the modules load.\n  gapi.load(\"client:auth2\", initClient);\n}\n\nfunction initClient() {\n  // In practice, your app can retrieve one or more discovery documents.\n  var discoveryUrl =\n    \"https://www.googleapis.com/discovery/v1/apis/drive/v3/rest\";\n\n  // Initialize the gapi.client object, which app uses to make API requests.\n  // Get API key and client ID from API Console.\n  // 'scope' field specifies space-delimited list of access scopes.\n  gapi.client\n    .init({\n      apiKey: \"AIzaSyCcr8bHw2MiKRDvGtGgs-qxSVpES84mX9k\",\n      clientId:\n        \"1065341075883-ai3bp8cagjv0e96ig0phkkng2fovorru.apps.googleusercontent.com\",\n      discoveryDocs: [discoveryUrl],\n      scope: SCOPE\n    })\n    .then(function () {\n      GoogleAuth = gapi.auth2.getAuthInstance();\n\n      // Listen for sign-in state changes.\n      gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);\n\n      // Handle initial sign-in state. (Determine if user is already signed in.)\n      var user = gapi.auth2.getAuthInstance().currentUser.get();\n      setSigninStatus();\n\n      // Call handleAuthClick function when user clicks on\n      //      \"Sign In/Authorize\" button.\n    });\n}\n\nfunction handleAuthClick() {\n  if (gapi.auth2.getAuthInstance().isSignedIn.get()) {\n    // User is authorized and has clicked \"Sign out\" button.\n    gapi.auth2.getAuthInstance().signOut();\n  } else {\n    // User is not signed in. Start Google auth flow.\n    gapi.auth2.getAuthInstance().signIn();\n  }\n}\n\nfunction revokeAccess() {\n  gapi.auth2.getAuthInstance().disconnect();\n}\n\nfunction setSigninStatus() {\n  var user = gapi.auth2.getAuthInstance().currentUser.get();\n  var isAuthorized = user.hasGrantedScopes(SCOPE);\n  /*if (isAuthorized) {\n    GoogleBtn2.setState({\n      signInOut_text: \"Sign out\",\n      revoke_text: \"Revoke access\"\n    });*/\n    /*$(\"#revoke-access-button\").css(\"display\", \"inline-block\");\n    $(\"#auth-status\").html(\n      \"You are currently signed in and have granted \" + \"access to this app.\"\n    );*/\n  /*} else {\n    GoogleBtn2.setState({\n      signInOut_text: \"Sign In/Authorize\",\n      revoke_text: \"Revoke access\"\n    });*/\n    /*$(\"#revoke-access-button\").css(\"display\", \"none\");\n    $(\"#auth-status\").html(\n      \"You have not authorized this app or you are \" + \"signed out.\"\n    );*/\n  //}\n}\n\nfunction updateSigninStatus() {\n  setSigninStatus();\n}\n\nclass GoogleBtn2 extends Component {\n  componentDidMount() {\n    loadApi();\n  }\n  state = {\n    signInOut_text: \"Sign In/Authorize\",\n    revoke_text: \"Revoke access\"\n  };\n  render() {\n    return (\n      <div>\n        <GoogleLogin\n          clientId={ CLIENT_ID }\n          buttonText='Login with google'\n          onSuccess={ this.login }\n          onFailure={ this.handleLoginFailure }\n          cookiePolicy={ 'single_host_origin' }\n          responseType='code,token'\n          onClick={() => handleAuthClick()}\n          id=\"sign-in-or-out-button\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default GoogleBtn2;\n"]},"metadata":{},"sourceType":"module"}