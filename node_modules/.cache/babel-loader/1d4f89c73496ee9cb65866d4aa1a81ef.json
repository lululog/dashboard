{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/R3G4/Delivery/B-DEV-500-PAR-5-1-cardgames-lucas.guyader/src/components/GoogleBtn.js\",\n    _s = $RefreshSig$();\n\n/*\n** EPITECH PROJECT, 2020\n** B-DEV-500-PAR-5-1-cardgames-lucas.guyader\n** File description:\n** GoogleBtn.js\n*/\nimport React from 'react';\nimport { GoogleLogin, GoogleLogout } from 'react-google-login';\nconst CLIENT_ID = '1065341075883-ai3bp8cagjv0e96ig0phkkng2fovorru.apps.googleusercontent.com';\nexport default function GoogleBtn(props) {\n  _s();\n\n  const [isLogined, setIsLogined] = React.useState(false);\n\n  const login = response => {\n    if (response.accessToken) {\n      setIsLogined(!isLogined);\n      props.setAuthGoogle(response.accessToken);\n      console.log(props.setAuthGoogle);\n    }\n  };\n\n  const logout = response => {\n    setIsLogined(!isLogined);\n    props.setAuthGoogle('');\n  };\n\n  const handleLoginFailure = response => {\n    alert('Failed to log in');\n  };\n\n  const handleLogoutFailure = response => {\n    alert('Failed to log out');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: isLogined ? /*#__PURE__*/_jsxDEV(GoogleLogout, {\n      clientId: CLIENT_ID,\n      buttonText: \"Logout\",\n      onLogoutSuccess: logout,\n      onFailure: handleLogoutFailure\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(GoogleLogin, {\n      clientId: CLIENT_ID,\n      buttonText: \"Login with google\",\n      onSuccess: login,\n      onFailure: handleLoginFailure,\n      cookiePolicy: 'single_host_origin',\n      responseType: \"code,token\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 26\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n} //class GoogleBtn extends Component {\n//   constructor(props) {\n//    super(props);\n//\n//    this.state = {\n//      isLogined: false\n//      //accessToken: ''\n//    };\n//\n//    this.login = this.login.bind(this);\n//    this.handleLoginFailure = this.handleLoginFailure.bind(this);\n//    this.logout = this.logout.bind(this);\n//    this.handleLogoutFailure = this.handleLogoutFailure.bind(this);\n//  }\n//\n//  login (response) {\n//    if(response.accessToken){\n//      this.setState(state => ({\n//        isLogined: true,\n//        setAuthGoogle: response.accessToken\n//      }));\n//    }\n//  }\n//\n//  logout (response) {\n//    this.setState(state => ({\n//      isLogined: false,\n//      setAuthGoogle: ''\n//    }));\n//  }\n//\n//  handleLoginFailure (response) {\n//    alert('Failed to log in')\n//  }\n//\n//  handleLogoutFailure (response) {\n//    alert('Failed to log out')\n//  }\n//\n//  render() {\n//    return (\n//    <div>\n//      { this.state.isLogined ?\n//        <GoogleLogout\n//            clientId={ CLIENT_ID }\n//            buttonText='Logout'\n//            onLogoutSuccess={ this.logout }\n//            onFailure={ this.handleLogoutFailure}\n//        >\n//        </GoogleLogout>: <GoogleLogin\n//          clientId={ CLIENT_ID }\n//          buttonText='Login with google'\n//          onSuccess={ this.login }\n//          onFailure={ this.handleLoginFailure }\n//          cookiePolicy={ 'single_host_origin' }\n//          responseType='code,token'\n//        />\n//      }\n//      { setAuthGoogle ? <Dashboard authUser={this.state.accessToken} /> : null}\n//\n//    </div>\n//    )\n//  }\n//}\n//export default GoogleBtn\n\n_s(GoogleBtn, \"7nMo76yoMrWCjIJlq3X9tQaguJg=\");\n\n_c = GoogleBtn;\n\nvar _c;\n\n$RefreshReg$(_c, \"GoogleBtn\");","map":{"version":3,"sources":["/home/R3G4/Delivery/B-DEV-500-PAR-5-1-cardgames-lucas.guyader/src/components/GoogleBtn.js"],"names":["React","GoogleLogin","GoogleLogout","CLIENT_ID","GoogleBtn","props","isLogined","setIsLogined","useState","login","response","accessToken","setAuthGoogle","console","log","logout","handleLoginFailure","alert","handleLogoutFailure"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,YAAtB,QAA0C,oBAA1C;AAEA,MAAMC,SAAS,GAAG,2EAAlB;AAEA,eAAe,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAAA;;AACvC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BP,KAAK,CAACQ,QAAN,CAAe,KAAf,CAAlC;;AAEA,QAAMC,KAAK,GAAIC,QAAD,IAAc;AAC1B,QAAIA,QAAQ,CAACC,WAAb,EAAyB;AACvBJ,MAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACAD,MAAAA,KAAK,CAACO,aAAN,CAAoBF,QAAQ,CAACC,WAA7B;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYT,KAAK,CAACO,aAAlB;AACD;AACF,GAND;;AAQA,QAAMG,MAAM,GAAIL,QAAD,IAAc;AAC3BH,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACAD,IAAAA,KAAK,CAACO,aAAN,CAAoB,EAApB;AACD,GAHD;;AAKA,QAAMI,kBAAkB,GAAIN,QAAD,IAAc;AACvCO,IAAAA,KAAK,CAAC,kBAAD,CAAL;AACD,GAFD;;AAIA,QAAMC,mBAAmB,GAAIR,QAAD,IAAc;AACxCO,IAAAA,KAAK,CAAC,mBAAD,CAAL;AACD,GAFD;;AAIA,sBACE;AAAA,cACIX,SAAS,gBACT,QAAC,YAAD;AACI,MAAA,QAAQ,EAAGH,SADf;AAEI,MAAA,UAAU,EAAC,QAFf;AAGI,MAAA,eAAe,EAAGY,MAHtB;AAII,MAAA,SAAS,EAAGG;AAJhB;AAAA;AAAA;AAAA;AAAA,YADS,gBAOQ,QAAC,WAAD;AACf,MAAA,QAAQ,EAAGf,SADI;AAEf,MAAA,UAAU,EAAC,mBAFI;AAGf,MAAA,SAAS,EAAGM,KAHG;AAIf,MAAA,SAAS,EAAGO,kBAJG;AAKf,MAAA,YAAY,EAAG,oBALA;AAMf,MAAA,YAAY,EAAC;AANE;AAAA;AAAA;AAAA;AAAA;AARrB;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;GA/GwBZ,S;;KAAAA,S","sourcesContent":["/*\n** EPITECH PROJECT, 2020\n** B-DEV-500-PAR-5-1-cardgames-lucas.guyader\n** File description:\n** GoogleBtn.js\n*/\n\nimport React from 'react'\nimport { GoogleLogin, GoogleLogout } from 'react-google-login';\n\nconst CLIENT_ID = '1065341075883-ai3bp8cagjv0e96ig0phkkng2fovorru.apps.googleusercontent.com';\n\nexport default function GoogleBtn(props) {\n  const [isLogined, setIsLogined] = React.useState(false);\n\n  const login = (response) => {\n    if (response.accessToken){\n      setIsLogined(!isLogined);\n      props.setAuthGoogle(response.accessToken)\n      console.log(props.setAuthGoogle);\n    }\n  }\n\n  const logout = (response) => {\n    setIsLogined(!isLogined);\n    props.setAuthGoogle('');\n  }\n\n  const handleLoginFailure = (response) => {\n    alert('Failed to log in')\n  }\n\n  const handleLogoutFailure = (response) => {\n    alert('Failed to log out')\n  }\n\n  return (\n    <div>\n      { isLogined ?\n        <GoogleLogout\n            clientId={ CLIENT_ID }\n            buttonText='Logout'\n            onLogoutSuccess={ logout }\n            onFailure={ handleLogoutFailure}\n        >\n        </GoogleLogout>: <GoogleLogin\n          clientId={ CLIENT_ID }\n          buttonText='Login with google'\n          onSuccess={ login }\n          onFailure={ handleLoginFailure }\n          cookiePolicy={ 'single_host_origin' }\n          responseType='code,token'\n        />\n      }\n    </div>\n  )\n}\n\n//class GoogleBtn extends Component {\n//   constructor(props) {\n//    super(props);\n//\n//    this.state = {\n//      isLogined: false\n//      //accessToken: ''\n//    };\n//\n//    this.login = this.login.bind(this);\n//    this.handleLoginFailure = this.handleLoginFailure.bind(this);\n//    this.logout = this.logout.bind(this);\n//    this.handleLogoutFailure = this.handleLogoutFailure.bind(this);\n//  }\n//\n//  login (response) {\n//    if(response.accessToken){\n//      this.setState(state => ({\n//        isLogined: true,\n//        setAuthGoogle: response.accessToken\n//      }));\n//    }\n//  }\n//\n//  logout (response) {\n//    this.setState(state => ({\n//      isLogined: false,\n//      setAuthGoogle: ''\n//    }));\n//  }\n//\n//  handleLoginFailure (response) {\n//    alert('Failed to log in')\n//  }\n//\n//  handleLogoutFailure (response) {\n//    alert('Failed to log out')\n//  }\n//\n//  render() {\n//    return (\n//    <div>\n//      { this.state.isLogined ?\n//        <GoogleLogout\n//            clientId={ CLIENT_ID }\n//            buttonText='Logout'\n//            onLogoutSuccess={ this.logout }\n//            onFailure={ this.handleLogoutFailure}\n//        >\n//        </GoogleLogout>: <GoogleLogin\n//          clientId={ CLIENT_ID }\n//          buttonText='Login with google'\n//          onSuccess={ this.login }\n//          onFailure={ this.handleLoginFailure }\n//          cookiePolicy={ 'single_host_origin' }\n//          responseType='code,token'\n//        />\n//      }\n//      { setAuthGoogle ? <Dashboard authUser={this.state.accessToken} /> : null}\n//\n//    </div>\n//    )\n//  }\n//}\n\n//export default GoogleBtn"]},"metadata":{},"sourceType":"module"}